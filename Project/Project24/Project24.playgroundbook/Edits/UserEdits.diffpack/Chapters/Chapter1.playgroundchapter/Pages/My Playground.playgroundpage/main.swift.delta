<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>Diff</key>
	<array>
		<dict>
			<key>ModifiedContent</key>
			<string>import UIKit


//part 1 
//  let name = "Taylor"
//  
//  for letter in name{
//      print("Give me a \(letter)")
//  }
//  
//  let letter = name[name.index(name.startIndex, offsetBy: 3)]
//  
//  extension String{
//      subscript(i:Int)-&gt; String{
//          return String(self[index(startIndex, offsetBy: i)])
//      }
//  }
//  
//  let letter2 = name[3]


//part 3

//  let string  = "This is a test string"
//  
//  let attributes : [NSAttributedString.Key: Any] = [
//      .foregroundColor: UIColor.white,
//      .backgroundColor: UIColor.red,
//      .font: UIFont.boldSystemFont(ofSize: 36)
//  ]
//  
//  let attributedString = NSAttributedString(string: string, attributes: attributes)
//  let attrString = NSMutableAttributedString(string: string)
//  
//  attrString.addAttribute(.font, value: UIFont.systemFont(ofSize: 8), range: NSRange(location: 0, length: 4))
//  attrString.addAttribute(.font, value: UIFont.systemFont(ofSize: 16), range: NSRange(location: 5, length: 2))
//  attrString.addAttribute(.font, value: UIFont.systemFont(ofSize: 24), range: NSRange(location: 8, length: 1))
//  attrString.addAttribute(.font, value: UIFont.systemFont(ofSize: 32), range: NSRange(location: 10, length: 4))
//  attrString.addAttribute(.font, value: UIFont.systemFont(ofSize: 40), range: NSRange(location: 15, length: 6))
//  

//part 2

//prefix suffix ******
//  let password = "12345"
//  password.hasPrefix("123")
//  password.hasSuffix("345")
//  
//  
//  extension String{
//      //removes prefix if exists
//      
//      func deletingPrefix(_ prefix:String) -&gt; String{
//          guard self.hasPrefix(prefix) else {return self}
//          return String(self.dropFirst(prefix.count))
//      }
//      
//      func deletingSufix(_ suffix:String) -&gt; String{
//          guard self.hasSuffix(suffix) else {return self}
//          return String(self.dropLast(suffix.count))
//      }
//      
//  }
//  
//  password.deletingPrefix("123")
//  password.deletingSufix("345")
//  

//captial*****
//  let weather = "it's going to rain"
//  print(weather.capitalized)
//  
//  extension String{
//      var captilizedFirst: String{
//          guard let firstLetter = self.first else {return ""}
//          return firstLetter.uppercased() + self.dropFirst()
//      }
//  }
//  
//  print(weather.captilizedFirst)

//contains() +++++++++++++

//  let input = "Swift is like Objective-C without the C"
//  input.contains("Swift")
//  
//  let languages = ["Python", "Ruby", "Swift"]
//  languages.contains("Swift")
//  
//  extension String{
//      func containsAny(of array:[String]) -&gt; Bool{
//          for item in array{
//              if self.contains(item){
//                  return true
//              }
//          }
//          return false
//      }
//  }
//  
//  input.containsAny(of: languages)
//  
//  languages.contains(where: input.contains)




// challenge 1
var checkStr = "taylor swift"

extension String{
    func superPrefix(_ prefix: String) -&gt; String{
        guard self.hasPrefix(prefix) else {return  prefix + self}
        return self
    }
}

checkStr.superPrefix("taylor ")
"cat".superPrefix("taylor")

//challenge 2
let numStringOne = "123123"
let numStringTwo = "aas22dasd"

extension String{
    var isNumeric: Bool{
        guard (Double(self) != nil)  else {return false}
        return true
    }
}

numStringOne.isNumeric
numStringTwo.isNumeric

//challenge 3 
var linesString = "this\nis\na\ntest"

extension String{
    var lines : [String]{
        return self.components(separatedBy: "\n")
    }
}
linesString.lines
</string>
			<key>ModifiedRange</key>
			<string>{0, 3584}</string>
			<key>OriginalContent</key>
			<string></string>
			<key>OriginalRange</key>
			<string>{0, 0}</string>
		</dict>
	</array>
	<key>File</key>
	<string>Chapters/Chapter1.playgroundchapter/Pages/My Playground.playgroundpage/main.swift</string>
</dict>
</plist>
